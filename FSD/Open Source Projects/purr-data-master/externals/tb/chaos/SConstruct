# scons script for flext build system
# Copyright (C) 2005  Tim Blechmann
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

import sys

env = Environment(CCFLAGS = '-DFLEXT_SYS_PD -DFLEXT_THREADS')

env.SConsignFile()
env.CacheDir('./obj')

opt = Options(['options.cache'])
opt.AddOptions(
	BoolOption('debug', 'Build with debugging symbols', False),
	('optimize', 'Optimize for specific architecture', None),
	BoolOption('icc', 'Build with intel c compiler', False),
	BoolOption('simd', 'build with simd instructions', False),
	BoolOption('cmem', 'build with normal memory allocation', True),
	('prefix', 'install prefix', '/usr/local'),
	('flext_path', 'flext path', None),
	('pd_path', 'pd path', None),
	)

opt.Update(env)

opt.Save('options.cache',env)
Help(opt.GenerateHelpText(env))

if env['icc']:
	env.Replace(CC="icc",
				SHCC="icc",
				CXX="icc",
				LINK="icc",
				SHCXX="icc",
				SHLINK="icc",
				)
	env.Append(LINKFLAGS="-static-libcxa")

 	env.Append(CCFLAGS=' -ip')
 	env.Append(LINKFLAGS='-ip')
	print "Using intel c compiler"


if env['cmem']:
 	env.Append(CPPDEFINES=['FLEXT_USE_CMEM'])


if env.Dictionary().has_key('flext_path'):
	env.Append(CPPPATH=[env['flext_path']])
else:
	env.Append(CPPPATH=['../../grill/flext/source'])


if env.Dictionary().has_key('pd_path'):
	env.Append(CPPPATH=[env['pd_path']])

if env.Dictionary().has_key('simd') and env['simd']:
	env.Append(CCFLAGS=' -mfpmath=sse -msse -mmmx -msse2')

if env.Dictionary().has_key('optimize'):
	if env['optimize']:
		env.Append(CCFLAGS=' -O3 '+env['optimize'])
		env.Append(LINKFLAGS=' -O3 '+env['optimize'])

if env.Dictionary().has_key('debug') and env['debug']:
	env.Append(CCFLAGS=' -g ')
	env.Append(CPPDEFINES=['_DEBUG'])
	env.Append(LIBS = 'flext-pd_d')
	env.Append(LINKFLAGS=' -g')
else:
	env.Append(LIBS = 'flext-pd')
	env.Append(CPPDEFINES="NDEBUG")

env.Append(CPPDEFINES=['FLEXT_SHARED'])

######################################################################
#
# read package.txt
#

packagefile = open('./package.txt', 'r')

desc = {}
line = packagefile.readline()
while line != "":
	line = line.strip()
	if len(line) > 0 and line[0] != '#' :
		var, data = line.split('=')

		if len(data) == 0:
			line = packagefile.readline()
			continue
		
		while data [-1] == '\\':
			nextline = packagefile.readline()
			nextline = nextline.strip()
			data = data + " " + nextline

		data = data.replace("\\", "")
		desc[var] = data

	
	line = packagefile.readline()
packagefile.close()


name = desc["NAME"]
if not desc.has_key("SRCDIR"):
	desc["SRCDIR"] = "."

sources = map (lambda x: desc["SRCDIR"] + '/' + x,
			   desc["SRCS"].split())

if desc.has_key("INCPATH"):
	env.Append(CPPPATH=desc["INCPATH"].strip().replace("-I", "").split())



######################################################################
#
# run custom.py
#
try:
	sys.path.append("./build/")
	import custom
	try:
		env, sources, headers = custom.custom(env,desc,sources)
	except:
		env, sources = custom.custom(env,desc,sources)
except:
	pass



######################################################################
#
# build
#

external = env.SharedLibrary(name, sources, SHLIBPREFIX='', SHLIBSUFFIX='.pd_linux')

prefix = env['prefix']
install = env.Install(prefix+'/lib/pd/extra',external)
env.Alias('install', install)
